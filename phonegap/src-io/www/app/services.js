angular.module('babywords.services', [])

    // persistence mechanism for words
    // this is not accessed directly by the controller, we interact via the model instead
    .factory("WordsDataService", function () {
        var words = JSON.parse(localStorage["words"] || "[]");
        if (!angular.isArray(words))
            words = [];
        words.forEach(function (w) {
            if (w.when && !angular.isDate(w.when))
                w.when = new Date(Date.parse(w.when));
        });

        function save() {
            localStorage["words"] = JSON.stringify(words);
        }

        return {
            saveWord: function (word) {
                this.removeWord(word);
                words.push(word);
                save();
            },

            removeWord: function (word) {
                words = words.filter(function (w) { return w !== word });
                save();
            },

            // all the words.
            getWords: function () {
                return words;
            }
            //
            //getWord: function(word) {
            //    var result = words.filter(function (w) { return w.word === word });
            //    if(result.length > 0)
            //        return result[0];
            //    return null;
            //}
        }
    })
    .factory("MediaService", function($q, FileManager) {
        function isTempRecording(src) {
            return /^temp/.test(src);
        }

        // get full URL for the specified file
        // we form the URL according to the file name: temp file go into the cache folder, others go to the data folder.
        function dataPath(src, directoryOnly) {
            return (isTempRecording(src) ?
                    // cacheDirectory not working on android??
                    (cordova.file.externalCacheDirectory || cordova.file.cacheDirectory) :
                    (cordova.file.externalDataDirectory || cordova.file.dataDirectory)) + (directoryOnly ? "" : src);
        }

        function moveToTempFile(sourceFile) {
            var ext = /\.[^.]*$/.exec(sourceFile)[0];
            var tempFile = "temprecording" + ext;
            var destDirectory = dataPath(tempFile, true);
            return FileManager.moveFile(sourceFile, destDirectory, tempFile);
        }

        return {
            // capture a video and return path
            startRecording: function () {
                return $q(function (resolve, reject) {
                    if (!navigator.device && navigator.device.capture) {
                        reject("Not available");
                        return;
                    }
                    navigator.device.capture.captureVideo(function (mediaFiles) {
                        // we move the file generated by the system into a temp file so that we can keep overwriting it and not generate a bunch of junk files
                        moveToTempFile(mediaFiles[0].fullPath).then(function (tempFile) {
                            console.log("Resolved to " + tempFile);
                            resolve(tempFile);
                        }, reject);
                    }, function (error) {
                        reject(error);
                    }, {
                        limit: 1
                    });
                });
            },

            // used to save the recording from a temp file to the application data directory.
            // resolve to path of the saved file
            saveRecording: function (src) {
                return $q(function (resolve, reject) {
                    if (!isTempRecording(src)) {
                        resolve(src);
                        return;
                    }
                    var m = /\.[^.]*$/.exec(src);
                    if (!m)
                        throw new Error("Unable to get file type " + src);
                    var dest = (new Date()).toISOString().replace(/[^0-9]/g, "") + m[0];
                    var destDirectory = dataPath("destFileName", true);
                    FileManager.moveFile(dataPath(src), destDirectory, dest).then(function () {
                        resolve(dest);
                    }, reject);
                });
            }
        }
    })
    .factory("NotificationService", function($log) {
        var error = null;
        var notification = null;

        return {
            setError: function(e) {
                $log.warn(e);
                error = e;
            },
            getError: function() {
                return error;
            },
            clearError: function() {
                error = null;
            },
            setNotification: function(n) {
                notification = n;
            },
            getNotification: function() {
                return notification;
            },
            clearNotification: function() {
                notification = null;
            }
        };
    })
    .factory("$exceptionHandler", function ($log) {
        return function (e, cause) {
            var s = "Error in " + (cause || "unspecified") + ": ";
            if (e.message)
                s += e.message;
            if (e.code)
                s += " (code = " + e.code + ")";
            $log.error(s);
        }
    })
    // convenience wrapper for File Manager API
    .factory("FileManager", function($q) {
        // custom FileEntry object
        function FileEntry(fileEntry) {
            this.entry = fileEntry;
        }
        angular.extend(FileEntry.prototype, {
            // Move file in specified directory / filename
            moveTo: function(destDirectory, destFileName) {
                if(typeof destDirectory == "string"){
                    return FileManager.resolveLocalFileSystemURL(destDirectory).then(function(dirEntry) {
                        return this.moveTo(dirEntry, destFileName);
                    }.bind(this));
                } else {
                    return $q(function(resolve, reject) {
                        this.entry.moveTo(destDirectory, destFileName, function() {
                            resolve();
                        }, reject);
                    }.bind(this));
                }
            }
        });
        var FileManager = {
            // return a file entry object for the specified file system URL
            resolveLocalFileSystemURL: function (sourceFile) {
                return $q(function (resolve, reject) {
                    window.resolveLocalFileSystemURL(sourceFile, function(fileEntry) {
                        resolve(new FileEntry(fileEntry));
                    }, function(error) {
                        reject(error);
                    });
                });
            },

            moveFile: function(sourceFile, destDirectory, destFileName) {
                return FileManager.resolveLocalFileSystemURL(sourceFile)
                    .then(function(fileEntry) {
                        return fileEntry.moveTo(destDirectory, destFileName);
                    });
            }
        };
        return FileManager;
    });